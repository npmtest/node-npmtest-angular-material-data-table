{"/home/travis/build/npmtest/node-npmtest-angular-material-data-table/test.js":"/* istanbul instrument in package npmtest_angular_material_data_table */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular-material-data-table/lib.npmtest_angular_material_data_table.js":"/* istanbul instrument in package npmtest_angular_material_data_table */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_angular_material_data_table = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_angular_material_data_table = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-angular-material-data-table/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-angular-material-data-table && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_angular_material_data_table */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_angular_material_data_table\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_angular_material_data_table.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_angular_material_data_table.rollup.js'] =\n            local.assetsDict['/assets.npmtest_angular_material_data_table.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_angular_material_data_table.__dirname + '/lib.npmtest_angular_material_data_table.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular-material-data-table/node_modules/angular-material-data-table/index.js":"// support for Browserify\n\nrequire('angular-material');\nrequire('./dist/md-data-table');\n\nmodule.exports = 'md.data.table';\n","/home/travis/build/npmtest/node-npmtest-angular-material-data-table/node_modules/angular-material-data-table/Gruntfile.js":"module.exports = function (grunt) {\n'use strict';\n\n  function banner() {\n    return '/*\\n' +\n      ' * Angular Material Data Table\\n' +\n      ' * https://github.com/daniel-nagy/md-data-table\\n' +\n      ' * @license MIT\\n' +\n      ' * v' + getVersion() + '\\n' +\n      ' */\\n' +\n      '(function (window, angular, undefined) {\\n\\'use strict\\';\\n\\n';\n  }\n  \n  function getVersion() {\n    return grunt.file.readJSON('./bower.json').version;\n  }\n\n  // load plugins\n  require('load-grunt-tasks')(grunt, {scope: 'devDependencies'});\n\n  grunt.initConfig({\n    \n    config: {\n      livereload: 35729\n    },\n    \n    // Add vendor prefixes\n    autoprefixer: {\n      options: {\n        browsers: ['last 2 versions']\n      },\n      app: {\n        files: {\n          'app/app.css': 'app/app.css'\n        }\n      },\n      build: {\n        files: {\n          'dist/md-data-table.css': 'dist/md-data-table.css'\n        }\n      }\n    },\n    \n    // remove generated files\n    clean: {\n      app: 'app/app.css',\n      build: '.temp',\n      dist: 'dist'\n    },\n\n    // condense javascript into a single file\n    concat: {\n      options: {\n        banner: banner(),\n        footer: '\\n\\n})(window, angular);',\n        process: function (src) {\n          return src.replace(/^'use strict';\\s*/, '');\n        },\n        separator: '\\n\\n'\n      },\n      build: {\n        files: {\n          'dist/md-data-table.js': ['.temp/templates.js', 'src/**/*.js']\n        }\n      }\n    },\n    \n    // static web server\n    connect: {\n      app: {\n        options: {\n          port: 8000,\n          // hostname: '127.0.0.1',\n          hostname: '0.0.0.0',\n          livereload: '<%= config.livereload %>',\n          base: ['bower_components', 'dist', 'app']\n        }\n      }\n    },\n    \n    // minify css files\n    cssmin: {\n      build: {\n        files: {\n          'dist/md-data-table.min.css': 'dist/md-data-table.css'\n        }\n      }\n    },\n    \n    // convert templates to javascript and load them into\n    // the template cache\n    html2js: {\n      build: {\n        options: {\n          base: 'app/md-data-table',\n          module: 'md.table.templates',\n          quoteChar: '\\'',\n          rename: function(moduleName) {\n            return moduleName.split('/').pop();\n          }\n        },\n        files: {\n          '.temp/templates.js': ['src/templates/*.html', 'src/icons/*.svg']\n        }\n      }\n    },\n    \n    // report bad javascript syntax, uses jshint-stylish for\n    // more readable logging to the console\n    jshint: {\n      options: {\n        jshintrc: '.jshintrc',\n        reporter: require('jshint-stylish'),\n        force: true\n      },\n      build: 'src/**/*.js',\n      app: ['app/app.js', 'app/scripts/**/*.js']\n    },\n\n    // compile less\n    less: {\n      app: {\n        files: {\n          'app/app.css': 'app/styles/app.less'\n        }\n      },\n      build: {\n        files: {\n          'dist/md-data-table.css': 'src/styles/md-table.less'\n        }\n      }\n    },\n\n    // minify javascript files\n    uglify: {\n      build: {\n        files: {\n          'dist/md-data-table.min.js': 'dist/md-data-table.js'\n        }\n      }\n    },\n    \n    // perform tasks on file change\n    watch: {\n      options: {\n        livereload: '<%= config.livereload %>'\n      },\n      appLess: {\n        files: 'app/styles/**/*.less',\n        tasks: ['less:app', 'autoprefixer:app']\n      },\n      appScripts: {\n        files: ['app/app.js', 'app/scripts/**/*.js'],\n        tasks: 'jshint:app'\n      },\n      appTemplates: {\n        files: 'app/templates/**/*.html'\n      },\n      buildLess: {\n        files: 'src/**/*.less',\n        tasks: ['less:build', 'autoprefixer:build']\n      },\n      buildScripts: {\n        files: 'src/**/*.js',\n        tasks: ['jshint:build', 'concat:build']\n      },\n      buildTemplates: {\n        files: 'src/**/*.html',\n        tasks: ['html2js:build', 'concat:build']\n      },\n      gruntfile: {\n        files: 'Gruntfile.js'\n      },\n      index: {\n        files: 'app/index.html'\n      }\n    }\n  });\n  \n  grunt.registerTask('default', function () {\n    \n    // buld the md-data-table module\n    grunt.task.run('build');\n    \n    // start the app\n    grunt.task.run('serve');\n  });\n  \n  grunt.registerTask('build', [\n    'jshint:build',\n    'less:build',\n    'autoprefixer:build',\n    'cssmin:build',\n    'html2js:build',\n    'concat:build',\n    'uglify:build'\n  ]);\n  \n  grunt.registerTask('serve', [\n    'jshint:app',\n    'less:app',\n    'autoprefixer:app',\n    'connect:app',\n    'watch'\n  ]);\n\n};","/home/travis/build/npmtest/node-npmtest-angular-material-data-table/node_modules/angular-material-data-table/app/app.js":"angular.module('nutritionApp', ['md.data.table', 'ngMaterial'])\n\n  .config(['$mdThemingProvider', function ($mdThemingProvider) {\n    'use strict';\n    \n    $mdThemingProvider.theme('default')\n      .primaryPalette('blue')\n      .accentPalette('pink');\n  }]);","/home/travis/build/npmtest/node-npmtest-angular-material-data-table/node_modules/angular-material-data-table/src/md-data-table.js":"angular.module('md.data.table', ['md.table.templates']);","/home/travis/build/npmtest/node-npmtest-angular-material-data-table/node_modules/angular-material-data-table/app/scripts/nutritionController.js":"angular.module('nutritionApp').controller('nutritionController', ['$http', '$mdEditDialog', '$q', '$timeout', '$scope', function ($http, $mdEditDialog, $q, $timeout, $scope) {\n  'use strict';\n\n  $scope.options = {\n    rowSelection: true,\n    multiSelect: true,\n    autoSelect: true,\n    decapitate: false,\n    largeEditDialog: false,\n    boundaryLinks: false,\n    limitSelect: true,\n    pageSelect: true\n  };\n\n  $scope.selected = [];\n  $scope.limitOptions = [5, 10, 15, {\n    label: 'All',\n    value: function () {\n      return $scope.desserts ? $scope.desserts.count : 0;\n    }\n  }];\n\n  $scope.query = {\n    order: 'name',\n    limit: 5,\n    page: 1\n  };\n\n  // for testing ngRepeat\n  $scope.columns = [{\n    name: 'Dessert',\n    orderBy: 'name',\n    unit: '100g serving'\n  }, {\n    descendFirst: true,\n    name: 'Type',\n    orderBy: 'type'\n  }, {\n    name: 'Calories',\n    numeric: true,\n    orderBy: 'calories.value'\n  }, {\n    name: 'Fat',\n    numeric: true,\n    orderBy: 'fat.value',\n    unit: 'g'\n  }, /* {\n    name: 'Carbs',\n    numeric: true,\n    orderBy: 'carbs.value',\n    unit: 'g'\n  }, */ {\n    name: 'Protein',\n    numeric: true,\n    orderBy: 'protein.value',\n    trim: true,\n    unit: 'g'\n  }, /* {\n    name: 'Sodium',\n    numeric: true,\n    orderBy: 'sodium.value',\n    unit: 'mg'\n  }, {\n    name: 'Calcium',\n    numeric: true,\n    orderBy: 'calcium.value',\n    unit: '%'\n  }, */ {\n    name: 'Iron',\n    numeric: true,\n    orderBy: 'iron.value',\n    unit: '%'\n  }, {\n    name: 'Comments',\n    orderBy: 'comment'\n  }];\n\n  $http.get('desserts.json').then(function (desserts) {\n    $scope.desserts = desserts.data;\n\n    // $scope.selected.push($scope.desserts.data[1]);\n\n    // $scope.selected.push({\n    //   name: 'Ice cream sandwich',\n    //   type: 'Ice cream',\n    //   calories: { value: 237.0 },\n    //   fat: { value: 9.0 },\n    //   carbs: { value: 37.0 },\n    //   protein: { value: 4.3 },\n    //   sodium: { value: 129.0 },\n    //   calcium: { value: 8.0 },\n    //   iron: { value: 1.0 }\n    // });\n\n    // $scope.selected.push({\n    //   name: 'Eclair',\n    //   type: 'Pastry',\n    //   calories: { value:  262.0 },\n    //   fat: { value: 16.0 },\n    //   carbs: { value: 24.0 },\n    //   protein: { value:  6.0 },\n    //   sodium: { value: 337.0 },\n    //   calcium: { value:  6.0 },\n    //   iron: { value: 7.0 }\n    // });\n\n    // $scope.promise = $timeout(function () {\n    //   $scope.desserts = desserts.data;\n    // }, 1000);\n  });\n\n  $scope.editComment = function (event, dessert) {\n    event.stopPropagation();\n\n    var dialog = {\n      // messages: {\n      //   test: 'I don\\'t like tests!'\n      // },\n      modelValue: dessert.comment,\n      placeholder: 'Add a comment',\n      save: function (input) {\n        dessert.comment = input.$modelValue;\n      },\n      targetEvent: event,\n      title: 'Add a comment',\n      validators: {\n        'md-maxlength': 30\n      }\n    };\n\n    var promise = $scope.options.largeEditDialog ? $mdEditDialog.large(dialog) : $mdEditDialog.small(dialog);\n\n    promise.then(function (ctrl) {\n      var input = ctrl.getInput();\n\n      input.$viewChangeListeners.push(function () {\n        input.$setValidity('test', input.$modelValue !== 'test');\n      });\n    });\n  };\n\n  $scope.toggleLimitOptions = function () {\n    $scope.limitOptions = $scope.limitOptions ? undefined : [5, 10, 15];\n  };\n\n  $scope.getTypes = function () {\n    return ['Candy', 'Ice cream', 'Other', 'Pastry'];\n  };\n\n  $scope.onPaginate = function(page, limit) {\n    console.log('Scope Page: ' + $scope.query.page + ' Scope Limit: ' + $scope.query.limit);\n    console.log('Page: ' + page + ' Limit: ' + limit);\n\n    $scope.promise = $timeout(function () {\n\n    }, 2000);\n  };\n\n  $scope.deselect = function (item) {\n    console.log(item.name, 'was deselected');\n  };\n\n  $scope.log = function (item) {\n    console.log(item.name, 'was selected');\n  };\n\n  $scope.loadStuff = function () {\n    $scope.promise = $timeout(function () {\n\n    }, 2000);\n  };\n\n  $scope.onReorder = function(order) {\n\n    console.log('Scope Order: ' + $scope.query.order);\n    console.log('Order: ' + order);\n\n    $scope.promise = $timeout(function () {\n\n    }, 2000);\n  };\n\n}]);","/home/travis/build/npmtest/node-npmtest-angular-material-data-table/node_modules/angular-material-data-table/src/scripts/mdBody.js":"'use strict';\n\nangular.module('md.data.table').directive('mdBody', mdBody);\n\nfunction mdBody() {\n\n  function compile(tElement) {\n    tElement.addClass('md-body');\n  }\n\n  return {\n    compile: compile,\n    restrict: 'A'\n  };\n}","/home/travis/build/npmtest/node-npmtest-angular-material-data-table/node_modules/angular-material-data-table/src/scripts/mdCell.js":"'use strict';\n\nangular.module('md.data.table').directive('mdCell', mdCell);\n\nfunction mdCell() {\n  \n  function compile(tElement) {\n    var select = tElement.find('md-select');\n    \n    if(select.length) {\n      select.addClass('md-table-select').attr('md-container-class', 'md-table-select');\n    }\n    \n    tElement.addClass('md-cell');\n    \n    return postLink;\n  }\n  \n  // empty controller to be bind properties to in postLink function\n  function Controller() {\n    \n  }\n  \n  function postLink(scope, element, attrs, ctrls) {\n    var select = element.find('md-select');\n    var cellCtrl = ctrls.shift();\n    var tableCtrl = ctrls.shift();\n    \n    if(attrs.ngClick) {\n      element.addClass('md-clickable');\n    }\n    \n    if(select.length) {\n      select.on('click', function (event) {\n        event.stopPropagation();\n      });\n      \n      element.addClass('md-clickable').on('click', function (event) {\n        event.stopPropagation();\n        select[0].click();\n      });\n    }\n    \n    cellCtrl.getTable = tableCtrl.getElement;\n    \n    function getColumn() {\n      return tableCtrl.$$columns[getIndex()];\n    }\n    \n    function getIndex() {\n      return Array.prototype.indexOf.call(element.parent().children(), element[0]);\n    }\n    \n    scope.$watch(getColumn, function (column) {\n      if(!column) {\n        return;\n      }\n      \n      if(column.numeric) {\n        element.addClass('md-numeric');\n      } else {\n        element.removeClass('md-numeric');\n      }\n    });\n  }\n  \n  return {\n    controller: Controller,\n    compile: compile,\n    require: ['mdCell', '^^mdTable'],\n    restrict: 'A'\n  };\n}","/home/travis/build/npmtest/node-npmtest-angular-material-data-table/node_modules/angular-material-data-table/src/scripts/mdColumn.js":"'use strict';\n\nangular.module('md.data.table').directive('mdColumn', mdColumn);\n\nfunction mdColumn($compile, $mdUtil) {\n\n  function compile(tElement) {\n    tElement.addClass('md-column');\n    return postLink;\n  }\n\n  function postLink(scope, element, attrs, ctrls) {\n    var headCtrl = ctrls.shift();\n    var tableCtrl = ctrls.shift();\n\n    function attachSortIcon() {\n      var sortIcon = angular.element('<md-icon md-svg-icon=\"arrow-up.svg\">');\n\n      $compile(sortIcon.addClass('md-sort-icon').attr('ng-class', 'getDirection()'))(scope);\n\n      if(element.hasClass('md-numeric')) {\n        element.prepend(sortIcon);\n      } else {\n        element.append(sortIcon);\n      }\n    }\n\n    function detachSortIcon() {\n      Array.prototype.some.call(element.find('md-icon'), function (icon) {\n        return icon.classList.contains('md-sort-icon') && element[0].removeChild(icon);\n      });\n    }\n\n    function disableSorting() {\n      detachSortIcon();\n      element.removeClass('md-sort').off('click', setOrder);\n    }\n\n    function enableSorting() {\n      attachSortIcon();\n      element.addClass('md-sort').on('click', setOrder);\n    }\n\n    function getIndex() {\n      return Array.prototype.indexOf.call(element.parent().children(), element[0]);\n    }\n\n    function isActive() {\n      return scope.orderBy && (headCtrl.order === scope.orderBy || headCtrl.order === '-' + scope.orderBy);\n    }\n\n    function isNumeric() {\n      return attrs.mdNumeric === '' || scope.numeric;\n    }\n\n    function setOrder() {\n      scope.$applyAsync(function () {\n        if(isActive()) {\n          headCtrl.order = scope.getDirection() === 'md-asc' ? '-' + scope.orderBy : scope.orderBy;\n        } else {\n          headCtrl.order = scope.getDirection() === 'md-asc' ? scope.orderBy : '-' + scope.orderBy;\n        }\n\n        if(angular.isFunction(headCtrl.onReorder)) {\n          $mdUtil.nextTick(function () {\n            headCtrl.onReorder(headCtrl.order);\n          });\n        }\n      });\n    }\n\n    function updateColumn(index, column) {\n      tableCtrl.$$columns[index] = column;\n\n      if(column.numeric) {\n        element.addClass('md-numeric');\n      } else {\n        element.removeClass('md-numeric');\n      }\n    }\n\n    scope.getDirection = function () {\n      if(isActive()) {\n        return headCtrl.order.charAt(0) === '-' ? 'md-desc' : 'md-asc';\n      }\n\n      return attrs.mdDesc === '' || scope.$eval(attrs.mdDesc) ? 'md-desc' : 'md-asc';\n    };\n\n    scope.$watch(isActive, function (active) {\n      if(active) {\n        element.addClass('md-active');\n      } else {\n        element.removeClass('md-active');\n      }\n    });\n\n    scope.$watch(getIndex, function (index) {\n      updateColumn(index, {'numeric': isNumeric()});\n    });\n\n    scope.$watch(isNumeric, function (numeric) {\n      updateColumn(getIndex(), {'numeric': numeric});\n    });\n\n    scope.$watch('orderBy', function (orderBy) {\n      if(orderBy) {\n        if(!element.hasClass('md-sort')) {\n          enableSorting();\n        }\n      } else if(element.hasClass('md-sort')) {\n        disableSorting();\n      }\n    });\n  }\n\n  return {\n    compile: compile,\n    require: ['^^mdHead', '^^mdTable'],\n    restrict: 'A',\n    scope: {\n      numeric: '=?mdNumeric',\n      orderBy: '@?mdOrderBy'\n    }\n  };\n}\n\nmdColumn.$inject = ['$compile', '$mdUtil'];","/home/travis/build/npmtest/node-npmtest-angular-material-data-table/node_modules/angular-material-data-table/src/scripts/mdEditDialog.js":"'use strict';\n\nangular.module('md.data.table')\n  .decorator('$controller', controllerDecorator)\n  .factory('$mdEditDialog', mdEditDialog);\n\n/*\n * A decorator for ng.$controller to optionally bind properties to the\n * controller before invoking the constructor. Stolen from the ngMock.\n *\n * https://docs.angularjs.org/api/ngMock/service/$controller\n */\nfunction controllerDecorator($delegate) {\n  return function(expression, locals, later, ident) {\n    if(later && typeof later === 'object') {\n      var create = $delegate(expression, locals, true, ident);\n      angular.extend(create.instance, later);\n      return create();\n    }\n    return $delegate(expression, locals, later, ident);\n  };\n}\n\ncontrollerDecorator.$inject = ['$delegate'];\n  \nfunction mdEditDialog($compile, $controller, $document, $mdUtil, $q, $rootScope, $templateCache, $templateRequest, $window) {\n  /* jshint validthis: true */\n  \n  var ESCAPE = 27;\n  \n  var busy = false;\n  var body = angular.element($document.prop('body'));\n  \n  /*\n   * bindToController\n   * controller\n   * controllerAs\n   * locals\n   * resolve\n   * scope\n   * targetEvent\n   * template\n   * templateUrl\n   */\n  var defaultOptions = {\n    clickOutsideToClose: true,\n    disableScroll: true,\n    escToClose: true,\n    focusOnOpen: true\n  };\n  \n  function build(template, options) {\n    var scope = $rootScope.$new();\n    var element = $compile(template)(scope);\n    var backdrop = $mdUtil.createBackdrop(scope, 'md-edit-dialog-backdrop');\n    var controller;\n    \n    if(options.controller) {\n      controller = getController(options, scope, {$element: element, $scope: scope});\n    } else {\n      angular.extend(scope, options.scope);\n    }\n    \n    if(options.disableScroll) {\n      disableScroll(element);\n    }\n    \n    body.prepend(backdrop).append(element.addClass('md-whiteframe-1dp'));\n    \n    positionDialog(element, options.target);\n    \n    if(options.focusOnOpen) {\r\n      focusOnOpen(element);\r\n    }\r\n    \n    if(options.clickOutsideToClose) {\n      backdrop.on('click', function () {\n        element.remove();\n      });\n    }\n    \n    if(options.escToClose) {\n      escToClose(element);\n    }\n    \n    element.on('$destroy', function () {\n      busy = false;\n      backdrop.remove();\n    });\n    \n    return controller;\n  }\n  \n  function disableScroll(element) {\n    var restoreScroll = $mdUtil.disableScrollAround(element, body);\n    \n    element.on('$destroy', function () {\n      restoreScroll();\n    });\n  }\n  \n  function getController(options, scope, inject) {\n    if(!options.controller) {\n      return;\n    }\n    \n    if(options.resolve) {\n      angular.extend(inject, options.resolve);\n    }\n    \n    if(options.locals) {\n      angular.extend(inject, options.locals);\n    }\n    \n    if(options.controllerAs) {\n      scope[options.controllerAs] = {};\n      \n      if(options.bindToController) {\n        angular.extend(scope[options.controllerAs], options.scope);\n      } else {\n        angular.extend(scope, options.scope);\n      }\n    } else {\n      angular.extend(scope, options.scope);\n    }\n    \n    if(options.bindToController) {\n      return $controller(options.controller, inject, scope[options.controllerAs]);\n    } else {\n      return $controller(options.controller, inject);\n    }\n  }\n  \n  function getTemplate(options) {\n    return $q(function (resolve, reject) {\n      var template = options.template;\n      \n      function illegalType(type) {\n        reject('Unexpected template value. Expected a string; received a ' + type + '.');\n      }\n      \n      if(template) {\n        return angular.isString(template) ? resolve(template) : illegalType(typeof template);\n      }\n      \n      if(options.templateUrl) {\n        template = $templateCache.get(options.templateUrl);\n        \n        if(template) {\n          return resolve(template);\n        }\n        \n        var success = function (template) {\n          return resolve(template);\n        };\n        \n        var error = function () {\n          return reject('Error retrieving template from URL.');\n        };\n        \n        return $templateRequest(options.templateUrl).then(success, error);\n      }\n      \n      reject('Template not provided.');\n    });\n  }\n  \n  function logError(error) {\n    busy = false;\n    console.error(error);\n  }\n  \n  function escToClose(element) {\n    var keyup = function (event) {\n      if(event.keyCode === ESCAPE) {\n        element.remove();\n      }\n    };\n    \n    body.on('keyup', keyup);\n    \n    element.on('$destroy', function () {\n      body.off('keyup', keyup);\n    });\n  }\n\n  function focusOnOpen(element) {\r\n    $mdUtil.nextTick(function () {\r\n      var autofocus = $mdUtil.findFocusTarget(element);\n      \n      if(autofocus) {\r\n        autofocus.focus();\r\n      }\r\n    }, false);\r\n  }\n\n  function positionDialog(element, target) {\n    var table = angular.element(target).controller('mdCell').getTable();\n    \n    var getHeight = function () {\n      return element.prop('clientHeight');\n    };\n    \n    var getSize = function () {\n      return {\n        width: getWidth(),\n        height: getHeight()\n      };\n    };\n    \n    var getTableBounds = function () {\n      var parent = table.parent();\n      \n      if(parent.prop('tagName') === 'MD-TABLE-CONTAINER') {\n        return parent[0].getBoundingClientRect();\n      } else {\n        return table[0].getBoundingClientRect();\n      }\n    };\n    \n    var getWidth = function () {\n      return element.prop('clientWidth');\n    };\n    \n    var reposition = function () {\n      var size = getSize();\n      var cellBounds = target.getBoundingClientRect();\n      var tableBounds = getTableBounds();\n      \n      if(size.width > tableBounds.right - cellBounds.left) {\n        element.css('left', tableBounds.right - size.width + 'px');\n      } else {\n        element.css('left', cellBounds.left + 'px');\n      }\n      \n      if(size.height > tableBounds.bottom - cellBounds.top) {\n        element.css('top', tableBounds.bottom - size.height + 'px');\n      } else {\n        element.css('top', cellBounds.top + 1 + 'px');\n      }\n      \n      element.css('minWidth', cellBounds.width + 'px');\n    };\n    \n    var watchWidth = $rootScope.$watch(getWidth, reposition);\n    var watchHeight = $rootScope.$watch(getHeight, reposition);\n    \n    $window.addEventListener('resize', reposition);\n    \n    element.on('$destroy', function () {\n      watchWidth();\n      watchHeight();\n      \n      $window.removeEventListener('resize', reposition);\n    });\n  }\n  \n  function preset(size, options) {\n    \n    function getAttrs() {\n      var attrs = 'type=\"' + (options.type || 'text') + '\"';\n      \n      for(var attr in options.validators) {\n        attrs += ' ' + attr + '=\"' + options.validators[attr] + '\"';\n      }\n      \n      return attrs;\n    }\n    \n    return {\n      controller: ['$element', '$q', 'save', '$scope', function ($element, $q, save, $scope) {\n        function update() {\n          if($scope.editDialog.$invalid) {\n            return $q.reject();\n          }\n          \n          if(angular.isFunction(save)) {\n            return $q.when(save($scope.editDialog.input));\n          }\n          \n          return $q.resolve();\n        }\n        \n        this.dismiss = function () {\n          $element.remove();\n        };\n        \n        this.getInput = function () {\n          return $scope.editDialog.input;\n        };\n        \n        $scope.dismiss = this.dismiss;\n        \n        $scope.submit = function () {\n          update().then(function () {\n            $scope.dismiss();\n          });\n        };\n      }],\n      locals: {\n        save: options.save\n      },\n      scope: {\n        cancel: options.cancel || 'Cancel',\n        messages: options.messages,\n        model: options.modelValue,\n        ok: options.ok || 'Save',\n        placeholder: options.placeholder,\n        title: options.title,\n        size: size\n      },\n      template:\n        '<md-edit-dialog>' +\n          '<div layout=\"column\" class=\"md-content\">' +\n            '<div ng-if=\"size === \\'large\\'\" class=\"md-title\">{{title || \\'Edit\\'}}</div>' +\n            '<form name=\"editDialog\" layout=\"column\" ng-submit=\"submit(model)\">' +\n              '<md-input-container md-no-float>' +\n                '<input name=\"input\" ng-model=\"model\" md-autofocus placeholder=\"{{placeholder}} \"' + getAttrs() + '>' +\n                '<div ng-messages=\"editDialog.input.$error\">' +\n                  '<div ng-repeat=\"(key, message) in messages\" ng-message=\"{{key}}\">{{message}}</div>' +\n                '</div>' +\n              '</md-input-container>' +\n            '</form>' +\n          '</div>' +\n          '<div ng-if=\"size === \\'large\\'\" layout=\"row\" layout-align=\"end\" class=\"md-actions\">' +\n            '<md-button class=\"md-primary\" ng-click=\"dismiss()\">{{cancel}}</md-button>' +\n            '<md-button class=\"md-primary\" ng-click=\"submit()\">{{ok}}</md-button>' +\n          '</div>' +\n        '</md-edit-dialog>'\n    };\n  }\n  \n  this.show = function (options) {\n    if(busy) {\n      return $q.reject();\n    }\n    \n    busy = true;\n    options = angular.extend({}, defaultOptions, options);\n    \n    if(!options.targetEvent) {\n      return logError('options.targetEvent is required to align the dialog with the table cell.');\n    }\n    \n    if(!options.targetEvent.currentTarget.classList.contains('md-cell')) {\n      return logError('The event target must be a table cell.');\n    }\n    \n    if(options.bindToController && !options.controllerAs) {\n      return logError('You must define options.controllerAs when options.bindToController is true.');\n    }\n    \n    options.target = options.targetEvent.currentTarget;\n    \n    var promise = getTemplate(options);\n    var promises = [promise];\n    \n    for(var prop in options.resolve) {\n      promise = options.resolve[prop];\n      promises.push($q.when(angular.isFunction(promise) ? promise() : promise));\n    }\n    \n    promise = $q.all(promises);\n    \n    promise['catch'](logError);\n    \n    return promise.then(function (results) {\n      var template = results.shift();\n      \n      for(var prop in options.resolve) {\n        options.resolve[prop] = results.shift();\n      }\n      \n      return build(template, options);\n    });\n  };\n  \n  this.small = function (options) {\n    return this.show(angular.extend({}, options, preset('small', options)));\n  }.bind(this);\n  \n  this.large = function (options) {\n    return this.show(angular.extend({}, options, preset('large', options)));\n  }.bind(this);\n  \n  return this;\n}\n\nmdEditDialog.$inject = ['$compile', '$controller', '$document', '$mdUtil', '$q', '$rootScope', '$templateCache', '$templateRequest', '$window'];\n","/home/travis/build/npmtest/node-npmtest-angular-material-data-table/node_modules/angular-material-data-table/src/scripts/mdFoot.js":"'use strict';\n\nangular.module('md.data.table').directive('mdFoot', mdFoot);\n\nfunction mdFoot() {\n\n  function compile(tElement) {\n    tElement.addClass('md-foot');\n  }\n\n  return {\n    compile: compile,\n    restrict: 'A'\n  };\n}","/home/travis/build/npmtest/node-npmtest-angular-material-data-table/node_modules/angular-material-data-table/src/scripts/mdHead.js":"'use strict';\n\nangular.module('md.data.table').directive('mdHead', mdHead);\n\nfunction mdHead($compile) {\n\n  function compile(tElement) {\n    tElement.addClass('md-head');\n    return postLink;\n  }\n  \n  // empty controller to be bind scope properties to\n  function Controller() {\n    \n  }\n  \n  function postLink(scope, element, attrs, tableCtrl) {\n    // because scope.$watch is unpredictable\n    var oldValue = new Array(2);\n    \n    function addCheckboxColumn() {\n      element.children().prepend('<th class=\"md-column md-checkbox-column\">');\n    }\n    \n    function attatchCheckbox() {\n      element.prop('lastElementChild').firstElementChild.appendChild($compile(createCheckBox())(scope)[0]);\n    }\n    \n    function createCheckBox() {\n      return angular.element('<md-checkbox>').attr({\n        'aria-label': 'Select All',\n        'ng-click': 'toggleAll()',\n        'ng-checked': 'allSelected()',\n        'ng-disabled': '!getSelectableRows().length'\n      });\n    }\n    \n    function detachCheckbox() {\n      var cell = element.prop('lastElementChild').firstElementChild;\n      \n      if(cell.classList.contains('md-checkbox-column')) {\n        angular.element(cell).empty();\n      }\n    }\n    \n    function enableRowSelection() {\n      return tableCtrl.$$rowSelect;\n    }\n    \n    function mdSelectCtrl(row) {\n      return angular.element(row).controller('mdSelect');\n    }\n    \n    function removeCheckboxColumn() {\n      Array.prototype.some.call(element.find('th'), function (cell) {\n        return cell.classList.contains('md-checkbox-column') && cell.remove();\n      });\n    }\n    \n    scope.allSelected = function () {\n      var rows = scope.getSelectableRows();\n      \n      return rows.length && rows.every(function (row) {\n        return row.isSelected();\n      });\n    };\n    \n    scope.getSelectableRows = function () {\n      return tableCtrl.getBodyRows().map(mdSelectCtrl).filter(function (ctrl) {\n        return ctrl && !ctrl.disabled;\n      });\n    };\n    \n    scope.selectAll = function () {\n      tableCtrl.getBodyRows().map(mdSelectCtrl).forEach(function (ctrl) {\n        if(ctrl && !ctrl.isSelected()) {\n          ctrl.select();\n        }\n      });\n    };\n    \n    scope.toggleAll = function () {\n      return scope.allSelected() ? scope.unSelectAll() : scope.selectAll();\n    };\n    \n    scope.unSelectAll = function () {\n      tableCtrl.getBodyRows().map(mdSelectCtrl).forEach(function (ctrl) {\n        if(ctrl && ctrl.isSelected()) {\n          ctrl.deselect();\n        }\n      });\n    };\n    \n    scope.$watchGroup([enableRowSelection, tableCtrl.enableMultiSelect], function (newValue) {\n      if(newValue[0] !== oldValue[0]) {\n        if(newValue[0]) {\n          addCheckboxColumn();\n          \n          if(newValue[1]) {\n            attatchCheckbox();\n          }\n        } else {\n          removeCheckboxColumn();\n        }\n      } else if(newValue[0] && newValue[1] !== oldValue[1]) {\n        if(newValue[1]) {\n          attatchCheckbox();\n        } else {\n          detachCheckbox();\n        }\n      }\n      \n      angular.copy(newValue, oldValue);\n    });\n  }\n  \n  return {\n    bindToController: true,\n    compile: compile,\n    controller: Controller,\n    controllerAs: '$mdHead',\n    require: '^^mdTable',\n    restrict: 'A',\n    scope: {\n      order: '=?mdOrder',\n      onReorder: '=?mdOnReorder'\n    }\n  };\n}\n\nmdHead.$inject = ['$compile'];","/home/travis/build/npmtest/node-npmtest-angular-material-data-table/node_modules/angular-material-data-table/src/scripts/mdRow.js":"'use strict';\n\nangular.module('md.data.table').directive('mdRow', mdRow);\n\nfunction mdRow() {\n\n  function compile(tElement) {\n    tElement.addClass('md-row');\n    return postLink;\n  }\n  \n  function postLink(scope, element, attrs, tableCtrl) {\n    function enableRowSelection() {\n      return tableCtrl.$$rowSelect;\n    }\n    \n    function isBodyRow() {\n      return tableCtrl.getBodyRows().indexOf(element[0]) !== -1;\n    }\n    \n    function isChild(node) {\n      return element[0].contains(node[0]);\n    }\n    \n    if(isBodyRow()) {\n      var cell = angular.element('<td class=\"md-cell\">');\n      \n      scope.$watch(enableRowSelection, function (enable) {\n        // if a row is not selectable, prepend an empty cell to it\n        if(enable && !attrs.mdSelect) {\n          if(!isChild(cell)) {\n            element.prepend(cell);\n          }\n          return;\n        }\n        \n        if(isChild(cell)) {\n          cell.remove();\n        }\n      });\n    }\n  }\n\n  return {\n    compile: compile,\n    require: '^^mdTable',\n    restrict: 'A'\n  };\n}","/home/travis/build/npmtest/node-npmtest-angular-material-data-table/node_modules/angular-material-data-table/src/scripts/mdSelect.js":"'use strict';\n\nangular.module('md.data.table').directive('mdSelect', mdSelect);\n\nfunction mdSelect($compile, $parse) {\n\n  // empty controller to bind scope properties to\n  function Controller() {\n\n  }\n\n  function postLink(scope, element, attrs, ctrls) {\n    var self = ctrls.shift();\n    var tableCtrl = ctrls.shift();\n    var getId = $parse(attrs.mdSelectId);\n\n    self.id = getId(self.model);\n\n    if(tableCtrl.$$rowSelect && self.id) {\n      if(tableCtrl.$$hash.has(self.id)) {\n        var index = tableCtrl.selected.indexOf(tableCtrl.$$hash.get(self.id));\n\n        // if the item is no longer selected remove it\n        if(index === -1) {\n          tableCtrl.$$hash.purge(self.id);\n        }\n\n        // if the item is not a reference to the current model update the reference\n        else if(!tableCtrl.$$hash.equals(self.id, self.model)) {\n          tableCtrl.$$hash.update(self.id, self.model);\n          tableCtrl.selected.splice(index, 1, self.model);\n        }\n\n      } else {\n\n        // check if the item has been selected\n        tableCtrl.selected.some(function (item, index) {\n          if(getId(item) === self.id) {\n            tableCtrl.$$hash.update(self.id, self.model);\n            tableCtrl.selected.splice(index, 1, self.model);\n\n            return true;\n          }\n        });\n      }\n    }\n\n    self.isSelected = function () {\n      if(!tableCtrl.$$rowSelect) {\n        return false;\n      }\n\n      if(self.id) {\n        return tableCtrl.$$hash.has(self.id);\n      }\n\n      return tableCtrl.selected.indexOf(self.model) !== -1;\n    };\n\n    self.select = function () {\n      if(self.disabled) {\n        return;\n      }\n\n      if(tableCtrl.enableMultiSelect()) {\n        tableCtrl.selected.push(self.model);\n      } else {\n        tableCtrl.selected.splice(0, tableCtrl.selected.length, self.model);\n      }\n\n      if(angular.isFunction(self.onSelect)) {\n        self.onSelect(self.model);\n      }\n    };\n\n    self.deselect = function () {\n      if(self.disabled) {\n        return;\n      }\n\n      tableCtrl.selected.splice(tableCtrl.selected.indexOf(self.model), 1);\n\n      if(angular.isFunction(self.onDeselect)) {\n        self.onDeselect(self.model);\n      }\n    };\n\n    self.toggle = function (event) {\n      if(event && event.stopPropagation) {\n        event.stopPropagation();\n      }\n\n      return self.isSelected() ? self.deselect() : self.select();\n    };\n\n    function autoSelect() {\n      return attrs.mdAutoSelect === '' || self.autoSelect;\n    }\n\n    function createCheckbox() {\n      var checkbox = angular.element('<md-checkbox>').attr({\n        'aria-label': 'Select Row',\n        'ng-click': '$mdSelect.toggle($event)',\n        'ng-checked': '$mdSelect.isSelected()',\n        'ng-disabled': '$mdSelect.disabled'\n      });\n\n      return angular.element('<td class=\"md-cell md-checkbox-cell\">').append($compile(checkbox)(scope));\n    }\n\n    function disableSelection() {\n      Array.prototype.some.call(element.children(), function (child) {\n        return child.classList.contains('md-checkbox-cell') && element[0].removeChild(child);\n      });\n\n      if(autoSelect()) {\n        element.off('click', toggle);\n      }\n    }\n\n    function enableSelection() {\n      element.prepend(createCheckbox());\n\n      if(autoSelect()) {\n        element.on('click', toggle);\n      }\n    }\n\n    function enableRowSelection() {\n      return tableCtrl.$$rowSelect;\n    }\n\n    function onSelectChange(selected) {\n      if(!self.id) {\n        return;\n      }\n\n      if(tableCtrl.$$hash.has(self.id)) {\n        // check if the item has been deselected\n        if(selected.indexOf(tableCtrl.$$hash.get(self.id)) === -1) {\n          tableCtrl.$$hash.purge(self.id);\n        }\n\n        return;\n      }\n\n      // check if the item has been selected\n      if(selected.indexOf(self.model) !== -1) {\n        tableCtrl.$$hash.update(self.id, self.model);\n      }\n    }\n\n    function toggle(event) {\n      scope.$applyAsync(function () {\n        self.toggle(event);\n      });\n    }\n\n    scope.$watch(enableRowSelection, function (enable) {\n      if(enable) {\n        enableSelection();\n      } else {\n        disableSelection();\n      }\n    });\n\n    scope.$watch(autoSelect, function (newValue, oldValue) {\n      if(newValue === oldValue) {\n        return;\n      }\n\n      if(tableCtrl.$$rowSelect && newValue) {\n        element.on('click', toggle);\n      } else {\n        element.off('click', toggle);\n      }\n    });\n\n    scope.$watch(self.isSelected, function (isSelected) {\n      return isSelected ? element.addClass('md-selected') : element.removeClass('md-selected');\n    });\n\n    scope.$watch(tableCtrl.enableMultiSelect, function (multiple) {\n      if(tableCtrl.$$rowSelect && !multiple) {\n        // remove all but the first selected item\n        tableCtrl.selected.splice(1);\n      }\n    });\n\n    tableCtrl.registerModelChangeListener(onSelectChange);\n\n    element.on('$destroy', function () {\n      tableCtrl.removeModelChangeListener(onSelectChange);\n    });\n  }\n\n  return {\n    bindToController: true,\n    controller: Controller,\n    controllerAs: '$mdSelect',\n    link: postLink,\n    require: ['mdSelect', '^^mdTable'],\n    restrict: 'A',\n    scope: {\n      model: '=mdSelect',\n      disabled: '=ngDisabled',\n      onSelect: '=?mdOnSelect',\n      onDeselect: '=?mdOnDeselect',\n      autoSelect: '=mdAutoSelect'\n    }\n  };\n}\n\nmdSelect.$inject = ['$compile', '$parse'];","/home/travis/build/npmtest/node-npmtest-angular-material-data-table/node_modules/angular-material-data-table/src/scripts/mdTable.js":"'use strict';\n\nangular.module('md.data.table').directive('mdTable', mdTable);\n\nfunction Hash() {\n  var keys = {};\n  \n  this.equals = function (key, item) {\n    return keys[key] === item;\n  };\n\n  this.get = function (key) {\n    return keys[key];\n  };\n  \n  this.has = function (key) {\n    return keys.hasOwnProperty(key);\n  };\n\n  this.purge = function (key) {\n    delete keys[key];\n  };\n  \n  this.update = function (key, item) {\n    keys[key] = item;\n  };\n}\n\nfunction mdTable() {\n  \n  function compile(tElement, tAttrs) {\n    tElement.addClass('md-table');\n    \n    if(tAttrs.hasOwnProperty('mdProgress')) {\n      var body = tElement.find('tbody')[0];\n      var progress = angular.element('<thead class=\"md-table-progress\" md-table-progress>');\n      \n      if(body) {\n        tElement[0].insertBefore(progress[0], body);\n      }\n    }\n  }\n  \n  function Controller($attrs, $element, $q, $scope) {\n    var self = this;\n    var queue = [];\n    var watchListener;\n    var modelChangeListeners = [];\n    \n    self.$$hash = new Hash();\n    self.$$columns = {};\n    \n    function enableRowSelection() {\n      self.$$rowSelect = true;\n      \n      watchListener = $scope.$watchCollection('$mdTable.selected', function (selected) {\n        modelChangeListeners.forEach(function (listener) {\n          listener(selected);\n        });\n      });\n      \n      $element.addClass('md-row-select');\n    }\n    \n    function disableRowSelection() {\n      self.$$rowSelect = false;\n      \n      if(angular.isFunction(watchListener)) {\n        watchListener();\n      }\n      \n      $element.removeClass('md-row-select');\n    }\n    \n    function resolvePromises() {\n      if(!queue.length) {\n        return $scope.$applyAsync();\n      }\n      \n      queue[0]['finally'](function () {\n        queue.shift();\n        resolvePromises();\n      });\n    }\n    \n    function rowSelect() {\n      return $attrs.mdRowSelect === '' || self.rowSelect;\n    }\n    \n    function validateModel() {\n      if(!self.selected) {\n        return console.error('Row selection: ngModel is not defined.');\n      }\n      \n      if(!angular.isArray(self.selected)) {\n        return console.error('Row selection: Expected an array. Recived ' + typeof self.selected + '.');\n      }\n      \n      return true;\n    }\n    \n    self.columnCount = function () {\n      return self.getRows($element[0]).reduce(function (count, row) {\n        return row.cells.length > count ? row.cells.length : count;\n      }, 0);\n    };\n    \n    self.getRows = function (element) {\n      return Array.prototype.filter.call(element.rows, function (row) {\n        return !row.classList.contains('ng-leave');\n      });\n    };\n    \n    self.getBodyRows = function () {\n      return Array.prototype.reduce.call($element.prop('tBodies'), function (result, tbody) {\n        return result.concat(self.getRows(tbody));\n      }, []);\n    };\n    \n    self.getElement = function () {\n      return $element;\n    };\n    \n    self.getHeaderRows = function () {\n      return self.getRows($element.prop('tHead'));\n    };\n    \n    self.enableMultiSelect = function () {\n      return $attrs.multiple === '' || $scope.$eval($attrs.multiple);\n    };\n    \n    self.waitingOnPromise = function () {\n      return !!queue.length;\n    };\n    \n    self.queuePromise = function (promise) {\n      if(!promise) {\n        return;\n      }\n      \n      if(queue.push(angular.isArray(promise) ? $q.all(promise) : $q.when(promise)) === 1) {\n        resolvePromises();\n      }\n    };\n    \n    self.registerModelChangeListener = function (listener) {\n      modelChangeListeners.push(listener);\n    };\n    \n    self.removeModelChangeListener = function (listener) {\n      var index = modelChangeListeners.indexOf(listener);\n      \n      if(index !== -1) {\n        modelChangeListeners.splice(index, 1);\n      }\n    };\n    \n    if($attrs.hasOwnProperty('mdProgress')) {\n      $scope.$watch('$mdTable.progress', self.queuePromise);\n    }\n    \n    $scope.$watch(rowSelect, function (enable) {\n      if(enable && !!validateModel()) {\n        enableRowSelection();\n      } else {\n        disableRowSelection();\n      }\n    });\n  }\n  \n  Controller.$inject = ['$attrs', '$element', '$q', '$scope'];\n  \n  return {\n    bindToController: true,\n    compile: compile,\n    controller: Controller,\n    controllerAs: '$mdTable',\n    restrict: 'A',\n    scope: {\n      progress: '=?mdProgress',\n      selected: '=ngModel',\n      rowSelect: '=mdRowSelect'\n    }\n  };\n}","/home/travis/build/npmtest/node-npmtest-angular-material-data-table/node_modules/angular-material-data-table/src/scripts/mdTablePagination.js":"'use strict';\n\nangular.module('md.data.table').directive('mdTablePagination', mdTablePagination);\n\nfunction mdTablePagination() {\n\n  function compile(tElement) {\n    tElement.addClass('md-table-pagination');\n  }\n\n  function Controller($attrs, $mdUtil, $scope) {\n    var self = this;\n    var defaultLabel = {\n      page: 'Page:',\n      rowsPerPage: 'Rows per page:',\n      of: 'of'\n    };\n\n    self.label = angular.copy(defaultLabel);\n\n    function isPositive(number) {\n      return parseInt(number, 10) > 0;\n    }\n\n    self.eval = function (expression) {\n      return $scope.$eval(expression);\n    };\n\n    self.first = function () {\n      self.page = 1;\n      self.onPaginationChange();\n    };\n\n    self.hasNext = function () {\n      return self.page * self.limit < self.total;\n    };\n\n    self.hasPrevious = function () {\n      return self.page > 1;\n    };\n\n    self.last = function () {\n      self.page = self.pages();\n      self.onPaginationChange();\n    };\n\n    self.max = function () {\n      return self.hasNext() ? self.page * self.limit : self.total;\n    };\n\n    self.min = function () {\n      return isPositive(self.total) ? self.page * self.limit - self.limit + 1 : 0;\n    };\n\n    self.next = function () {\n      self.page++;\n      self.onPaginationChange();\n    };\n\n    self.onPaginationChange = function () {\n      if(angular.isFunction(self.onPaginate)) {\n        $mdUtil.nextTick(function () {\n          self.onPaginate(self.page, self.limit);\n        });\n      }\n    };\n\n    self.pages = function () {\n      return isPositive(self.total) ? Math.ceil(self.total / (isPositive(self.limit) ? self.limit : 1)) : 1;\n    };\n\n    self.previous = function () {\n      self.page--;\n      self.onPaginationChange();\n    };\n\n    self.showBoundaryLinks = function () {\n      return $attrs.mdBoundaryLinks === '' || self.boundaryLinks;\n    };\n\n    self.showPageSelect = function () {\n      return $attrs.mdPageSelect === '' || self.pageSelect;\n    };\n\n    $scope.$watch('$pagination.limit', function (newValue, oldValue) {\n      if(isNaN(newValue) || isNaN(oldValue) || newValue === oldValue) {\n        return;\n      }\n\n      // find closest page from previous min\n      self.page = Math.floor(((self.page * oldValue - oldValue) + newValue) / (isPositive(newValue) ? newValue : 1));\n      self.onPaginationChange();\n    });\n\n    $attrs.$observe('mdLabel', function (label) {\n      angular.extend(self.label, defaultLabel, $scope.$eval(label));\n    });\n\n    $scope.$watch('$pagination.total', function (newValue, oldValue) {\n      if(isNaN(newValue) || newValue === oldValue) {\n        return;\n      }\n\n      if(self.page > self.pages()) {\n        self.last();\n      }\n    });\n  }\n\n  Controller.$inject = ['$attrs', '$mdUtil', '$scope'];\n\n  return {\n    bindToController: {\n      boundaryLinks: '=?mdBoundaryLinks',\n      disabled: '=ngDisabled',\n      limit: '=mdLimit',\n      page: '=mdPage',\n      pageSelect: '=?mdPageSelect',\n      onPaginate: '=?mdOnPaginate',\n      limitOptions: '=?mdLimitOptions',\n      total: '@mdTotal'\n    },\n    compile: compile,\n    controller: Controller,\n    controllerAs: '$pagination',\n    restrict: 'E',\n    scope: {},\n    templateUrl: 'md-table-pagination.html'\n  };\n}","/home/travis/build/npmtest/node-npmtest-angular-material-data-table/node_modules/angular-material-data-table/src/scripts/mdTableProgress.js":"'use strict';\n\nangular.module('md.data.table').directive('mdTableProgress', mdTableProgress);\n\nfunction mdTableProgress() {\n\n  function postLink(scope, element, attrs, tableCtrl) {\n    scope.columnCount = tableCtrl.columnCount;\n    scope.deferred = tableCtrl.waitingOnPromise;\n  }\n\n  return {\n    link: postLink,\n    require: '^^mdTable',\n    restrict: 'A',\n    scope: {},\n    templateUrl: 'md-table-progress.html'\n  };\n}","/home/travis/build/npmtest/node-npmtest-angular-material-data-table/node_modules/angular-material-data-table/src/scripts/virtualPageSelect.js":"'use strict';\n\nangular.module('md.data.table').directive('virtualPageSelect', virtualPageSelect);\n\nfunction virtualPageSelect() {\n\n  function Controller($element, $scope) {\n    var self = this;\n    var content = $element.find('md-content');\n\n    self.pages = [];\n\n    function getMin(pages, total) {\n      return Math.min(pages, isFinite(total) && isPositive(total) ? total : 1);\n    }\n\n    function isPositive(number) {\n      return number > 0;\n    }\n\n    function setPages(max) {\n      if(self.pages.length > max) {\n        return self.pages.splice(max);\n      }\n\n      for(var i = self.pages.length; i < max; i++) {\n        self.pages.push(i + 1);\n      }\n    }\n\n    content.on('scroll', function () {\n      if((content.prop('clientHeight') + content.prop('scrollTop')) >= content.prop('scrollHeight')) {\n        $scope.$applyAsync(function () {\n          setPages(getMin(self.pages.length + 10, self.total));\n        });\n      }\n    });\n\n    $scope.$watch('$pageSelect.total', function (total) {\n      setPages(getMin(Math.max(self.pages.length, 10), total));\n    });\n\n    $scope.$watch('$pagination.page', function (page) {\n      for(var i = self.pages.length; i < page; i++) {\n        self.pages.push(i + 1);\n      }\n    });\n  }\n\n  Controller.$inject = ['$element', '$scope'];\n\n  return {\n    bindToController: {\n      total: '@'\n    },\n    controller: Controller,\n    controllerAs: '$pageSelect'\n  };\n}"}